1. socket()	// 폰 구매
2. bind()	// 전화 번호 부여
3. listen()	// 개통
4. accept()	// 통화

ip(내 컴퓨터의 번호)로 들어온 정보는
포트(응용프로그램의 번호)를 통해 응용프로그램을 구분하여 전송된다

파일 디스크립터 : 파일 또는 소켓에 부여된 정수


// 실습 환경
vmware for windows 설치 - 가상머신
Ubuntu 20.04.2.0 LTS(안정적, 장기적 버전) 설치 - 리눅스 프로그램

ubuntu-64bit 선택, 20기가 -> 30기가로 고칠 것
세팅 
프로세서 -> 4
cd/dvd에서 iso 탑재

컨알t 한 뒤 
>>> sudo apt-get update랑 upgrade할 것

Work 폴더 / Socket 폴더 생성

>>> sudo nano /etc/nanorc
set autoindent
set linenumbers
set tabsize 3

// 내 컴퓨터안에서 서버 연결
ex 1 hello_server.c + ex 2 hello_clinet.c

gcc 설치 후
둘 다 실행 해볼것(server 먼저)

// 파일에 데이터 쓰기
ex low_open.c

// 파일 데이터 읽기
ex low_read.c

// 디스크립터와 소켓 생성
ex fd_seri.c

// 윈도우 기반으로 구현하기
서버 -> 리눅스 계열 기반 多
클라이언트 프로그램 -> 윈도우 기반 多

추가 종속성 추가 링커/입력/추가종속성

>> ifconfig 해서 자신의 IP확인
192.168.204.128

ubuntu에서 ./hserver 실행하여 서버 실행

cmd창에서 hello_clinet_win.c의 실행파일 + IP + 9190 타이핑 후 실행

// 프로토콜
: 대화에 필요한 통신규약/약속
프토로콜 체계가 존재

// 소켓 생성
ex tcp_client.c

// 주소체계
A~E클래스

// 데이터 전송에 성공하려면 목적지 주소에는
IP주소뿐만 아니라 PORT번호도 포함되어야 응용프로그램에까지 전송이 된다

// 주소 정보의 표현
구조체로 구성된 주소 정보

// 네트워크 바이트 순서
빅인디언 : 낮은 번지 부터 높은 자리 숫자 들어감
리틀인디언 : 낮은 번지 부터 낮은 자리 숫자 들어감
네트워크 바이트 순서는 빅인디언 기준

// 바이트 순서의 변환
CPU마다 정렬 방식이 다르므로 해당 시스템으로 전송 전에
맞는 방식으로 변환을 거칠 것

htons : short형 데이터를 호스트 바이트 순서 -> 네트워크 바이트 순서로 변환
ntohl : long형 데이터를 네트워크 바이트 순서 -> 호스트 바이트 순서로 변환

ex endian_conv.c