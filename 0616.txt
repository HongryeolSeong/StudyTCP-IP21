// 시그널 핸들링을 통한 좀비 소멸
ex remove_zombie.c

// 프로세스 기반 다중접속 서버
서버의 부모 = 문지기, 자식과 클라이언트와 연결

ex echo_mpserv.c + ex echo_client.c

부모는 서버 소켓만, 자식은 클라이언트 소켓만 필요

// TCP 입출력 루틴 분할
멀티 프로세스를 바탕으로 데이터의 송/수신 작업을 분리
부모 -> 수신, 자식 -> 송신

ex echo_mpserv.c + ex echo_mpclient.c

// 프로세스간 통신이 필요한 경우
프로세스간 독립된 관계라 원래는 안되지만 통신이 필요한 경우가 발생한다
-> 별도의 메모리공간(파이프)을 이용하여 데이터를 공유하는식으로 통신

ex pipe1.c(단방향)

// 파이프 기반 양방향 통신
ex pipe2.c
-> sleep()으로 딜레이가 없을시 자식이 데이터를 다시 가져가므로 무한 대기 발생

// 파이프 2개 사용 양방향 통신이
ex pipe3.c

// 메시지 저장 가능한 에코서버
ex echo_storeserv.c + ex echo_mpclient.c

// 멀티플렉싱 서버 구현
select() 함수
ex select.c

select()를 활용한 서버
ex echo_selecterv.c + ex echo_eclient.c

// 쓰레드 등장 배경
멀티프로세스의 경우 컨텍스트 스위칭이 CPU에 많은 부담을 주게된다.
--> 경량화된 프로세스 = 쓰레드

프로세스 내에서 생성 / 실행된다.
프로세스 : 운영체제 관점에서의 실행 단위
쓰레드 : 프로세스 관점에서의 실행 단위

생성 및 실행
ex thread1.c
ex thread2.c
ex thread3.c
ex thresd4.c